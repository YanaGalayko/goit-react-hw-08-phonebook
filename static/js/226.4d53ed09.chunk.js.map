{"version":3,"file":"static/js/226.4d53ed09.chunk.js","mappings":"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","sources":["components/ContactFilter/ContactFilter.styled.js","redux/contacts/selectors.js","components/ContactFilter/ContactFilter.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","components/ContactListItms/ContactsListItem.styled.js","components/ContactListItms/ContactsListItem.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const FilterContainer = styled.div`\n  margin-bottom: 20px;`;\n\nexport const FilterText = styled.p`\n  font-size: 20px;\n  font-weight: 400;\n  margin-bottom: 10px;\n`;\n\nexport const FilterInputn = styled.input`\n  padding: 6px 6px;\n  border-radius: 8px;\n  border: 2px solid black;\n  background: #F0F8FF;\n`;","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.contacts;\nexport const selectFilter = state => state.filter;\nexport const selectLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);","import { useDispatch, useSelector } from \"react-redux\";\nimport { FilterContainer, \n         FilterText,\n         FilterInputn } from \"./ContactFilter.styled\"\nimport { filterContacts } from \"redux/contacts/filterSlice\";\nimport { selectFilter } from \"redux/contacts/selectors\";\n\nexport const ContactFilter = () => {\n    const dispatch = useDispatch();\n    const filter = useSelector(selectFilter);\n    \nreturn (\n    <FilterContainer>\n        <FilterText>Find contacts by name</FilterText>\n        <FilterInputn\n        name=\"filter\"\n         type=\"text\"\n         value={filter}\n         onChange={evt => dispatch(filterContacts(evt.target.value))}\n         />\n    </FilterContainer>\n)\n}","import styled from 'styled-components';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const FormContact = styled(Form)`\n  max-width: 400px;\n  border-radius: 10px;\n  border: 2px solid black;\n  padding: 15px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 20px;\n  margin-bottom: 30px;\n  `;\n\nexport const FormLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  font-size: 18px;\n  font-weight: 500;\n  `;\n\nexport const FormInput = styled(Field)`\n  background: #F0F8FF;\n  border-radius: 8px;\n  border: 2px solid black;\n  padding: 4px 4px;\n  width: 300px;\n  margin-bottom: 6px;\n`;\n\nexport const FormBtn = styled.button`\n   background: #ADD8E6;\n   border-radius: 8px;\n   border: 2px solid black;\n   font-size: 15px;\n   font-weight: 400;\n   padding: 7px 7px;\n\n   &:hover {\n    background: #87CEEB;\n   }\n\n   &:focus {\n    background: #87CEEB;\n   }\n   `;\n\nexport const FormError = styled(ErrorMessage)`\n   color: #DC143C;\n   font-size: 14px;\n   font-weight: 400;\n\n`;","import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { FormContact,\n         FormLabel,\n         FormInput, \n         FormBtn, \n         FormError } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\n\nconst FormSchema = Yup.object().shape({\n    name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .matches(\n        \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      )\n    .required('Required'),\n    number: Yup.string()\n    .min(9, 'The 9 symbols required!')\n    .max(13, 'Less than 13 symbols!')\n    .matches(\n        /\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}/,\n        \"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n      )\n    .required('Required'),\n  });\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n    return (\n        <Formik\n          initialValues={{ name: '', number: '' }}\n          validationSchema={FormSchema}\n          onSubmit={(values, actions) => {\n            const isContactName = contacts.some(\n              contact => contact.name.toLowerCase() === values.name.toLowerCase()\n            );\n            \n            if (isContactName) {\n              alert(`${values.name} is already in contacts.`);\n              return;\n            }\n        \n            const isContactNumber = contacts.some(\n              contact => contact.number === values.number\n            );\n        \n            if (isContactNumber) {\n              alert(`${values.number} is already in contacts.`);\n              return;\n            }\n\n            dispatch(addContact(values));\n            actions.resetForm();\n          }}\n        >\n            <FormContact>\n              <FormLabel>\n                    Name\n                <FormInput type=\"text\" name=\"name\" placeholder=\"Enter your name\"/>\n                <FormError name=\"name\" component=\"div\" />\n              </FormLabel>\n              <FormLabel>\n                    Number\n                <FormInput type=\"tel\" name=\"number\" placeholder=\"Enter your phone\"/>\n                <FormError name=\"number\" component=\"div\" />\n              </FormLabel>\n              <FormBtn type=\"submit\">\n                Add contact\n              </FormBtn>\n            </FormContact>\n        </Formik>\n    )\n}","import styled from 'styled-components';\n\nexport const ListItems = styled.li`\n  display: flex;\n  gap: 20px;\n  border: 1px solid black;\n  width: 350px;\n  border-radius: 8px;\n`;\n\nexport const ListText = styled.p`\n  font-size: 20px;\n  font-weight: 400;\n  width: 350px;\n`;\n\nexport const ListBtn = styled.button`\n   background: #ADD8E6;\n   border-radius: 8px;\n   border: 2px solid black;\n   font-size: 14px;\n   font-weight: 400;\n   padding: 5px 5px;\n\n   &:hover {\n    background: #87CEEB;\n   }\n\n   &:focus {\n    background: #87CEEB;\n   }\n   `;\n","import { useDispatch } from \"react-redux\"\nimport { ListItems,\n         ListText,\n         ListBtn } from \"./ContactsListItem.styled\"\nimport { deleteContact } from \"redux/contacts/operations\"\n\nexport const ContactsListItem = ({contact}) => {\n   const dispatch = useDispatch()\n\nreturn (\n    <ListItems>\n        <ListText>\n            {contact.name} : {contact.number}\n        </ListText>\n        <ListBtn onClick={() => dispatch(deleteContact(contact.id))}>Delete</ListBtn>\n    </ListItems>\n)\n}","import styled from 'styled-components';\n\nexport const ContactListStyle = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;","import { ContactsListItem } from \"components/ContactListItms/ContactsListItem\"\nimport { ContactListStyle } from \"./ContactList.styled\"\nimport { useSelector } from \"react-redux\";\nimport { selectVisibleContacts } from \"redux/contacts/selectors\";\n\nexport const ContactList = () => {\n    const filterContacts = useSelector(selectVisibleContacts)\n\n    return (\n        <>\n        {filterContacts.length  ? (\n            <ContactListStyle>\n            {filterContacts.map(contact => (\n                <ContactsListItem\n                    key={contact.id}\n                    contact={contact}\n                />      \n            ))}\n        </ContactListStyle>\n        ) : (\n            <p>Contact list is empty, please add contacts!</p>\n        )}\n        </>\n\n       \n    )\n}","import { ContactFilter } from \"components/ContactFilter/ContactFilter\";\nimport { ContactForm } from \"components/ContactForm/ContactForm\";\nimport { ContactList } from \"components/ContactList/ContactList\";\nimport Loader from \"components/Loader/Loader\";\nimport { useEffect } from \"react\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchContacts } from \"redux/contacts/operations\";\nimport { selectLoading } from \"redux/contacts/selectors\";\n\nexport default function Contacts() {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(selectLoading);\n  \n    useEffect(() => {\n      dispatch(fetchContacts());\n    }, [dispatch]);\n  \n    return (\n      <>\n    \n          <title>Contacts</title>\n   \n        <ContactForm />\n        <ContactFilter />\n        <div>{isLoading && <Loader/>}</div>\n        <ContactList />\n      </>\n    );\n  }"],"names":["FilterContainer","styled","_templateObject","_taggedTemplateLiteral","FilterText","_templateObject2","FilterInputn","_templateObject3","selectContacts","state","contacts","selectFilter","filter","selectLoading","isLoading","selectVisibleContacts","createSelector","contact","name","toLowerCase","includes","ContactFilter","dispatch","useDispatch","useSelector","_jsxs","children","_jsx","type","value","onChange","evt","filterContacts","target","FormContact","Form","FormLabel","FormInput","Field","FormBtn","_templateObject4","FormError","ErrorMessage","_templateObject5","FormSchema","Yup","shape","min","max","matches","required","number","ContactForm","Formik","initialValues","validationSchema","onSubmit","values","actions","some","alert","concat","addContact","resetForm","placeholder","component","ListItems","ListText","ListBtn","ContactsListItem","_ref","onClick","deleteContact","id","ContactListStyle","ContactList","_Fragment","length","map","Contacts","useEffect","fetchContacts","Loader"],"sourceRoot":""}